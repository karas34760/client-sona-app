name: Build & Publish

on:
  push:
    branches:
      - 'dev' # Change this to your branch name
  workflow_dispatch: # Manually run the workflow

jobs:
  next-build:
    if: ${{ github.event_name == 'workflow_dispatch' }} # Run only if triggered manually
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install Dependencies and Build
        run: |
          yarn install
          yarn build
        env:
          NEXT_PUBLIC_FIREBASE_API_KEY: ${{ secrets.NEXT_PUBLIC_FIREBASE_API_KEY }}
      - name: Upload Next build
        uses: actions/upload-artifact@v2
        with:
          name: build
          path: |
            .next
            public
          retention-days: 7

  docker-push:
    needs: next-build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Download next build
        uses: actions/download-artifact@v2
        with:
          name: build
      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKERHUB_ACCESS_TOKEN }}" | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
      - name: Build and Push Docker Images
        run: |
          export CURRENT_BRANCH=${GITHUB_REF#refs/heads/}
          export TAG=$([[ $CURRENT_BRANCH == "dev" ]] && echo "latest" || echo $CURRENT_BRANCH)
          export DOCKERHUB_IMAGE=${{ secrets.DOCKERHUB_IMAGE }}
          docker build -t $DOCKERHUB_IMAGE .
          echo "Pushing Image to Docker Hub"
          docker push $DOCKERHUB_IMAGE

  deploy-to-vps:
    needs: docker-push
    runs-on: ubuntu-latest
    steps:
      - name: SSH into VPS and deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.VPS_SSH }} # Use SSH keys instead of password
          script: |
            DOCKER_NAME=${{ secrets.DOCKERHUB_USERNAME }}
            DOCKERHUB_IMAGE=${{ secrets.DOCKERHUB_IMAGE }}
            TAG=$([[ $CURRENT_BRANCH == "dev" ]] && echo "latest" || echo $CURRENT_BRANCH)
            docker stop $DOCKER_NAME || true
            docker rm $DOCKER_NAME || true
            docker pull $DOCKERHUB_IMAGE:$TAG
            docker run -d --name $DOCKER_NAME -p 3000:3000 $DOCKERHUB_IMAGE:$TAG
