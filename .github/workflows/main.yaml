name: Build & Publish

on:
  push:
    branches:
      - 'dev' # dev
      - '!dependabot/**' # exclude dependbot branches
  workflow_dispatch: # Manually run the workflow

jobs:
  next-build:
    if: ${{ github.event_name == 'workflow_dispatch' }} # Run only if triggered manually
    runs-on: ubuntu-latest # Change to ubuntu-20.04 if required
    steps:
      - name: Checkout
        uses: actions/checkout@v2 # Checkout the code
      - run: sudo apt update && sudo apt install -y curl # Install Curl
      - run: curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash - # Install Node.js LTS
      - run: sudo apt install -y nodejs # Install Node.js
      - run: npm install -g yarn # Install Yarn globally
      - run: npm ci # Install project dependencies
      - run: yarn build
        env:
          NEXT_PUBLIC_FIREBASE_API_KEY: ${{secrets.NEXT_PUBLIC_FIREBASE_API_KEY}}
      - name: Upload Next build # Upload the artifact
        uses: actions/upload-artifact@v2
        with:
          name: build
          path: |
            .next
            public
          retention-days: 7 # artifact retention duration, can be up to 30 days

  docker-push:
    needs: next-build # Job depends on next-build(above) job
    runs-on: ubuntu-latest # Change to ubuntu-20.04 if required
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Download next build # Download the above uploaded artifact
        uses: actions/download-artifact@v2
        with:
          name: build
      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKERHUB_ACCESS_TOKEN}}" | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
      - name: Build and Push Docker Images
        run: |
          export CURRENT_BRANCH=${GITHUB_REF#refs/heads/}
          export TAG=$([[ $CURRENT_BRANCH == "dev" ]] && echo "latest" || echo $CURRENT_BRANCH)
          export DOCKERHUB_IMAGE=${{ secrets.DOCKERHUB_USERNAME }}/your-docker-image-name:$TAG
          docker build -t $DOCKERHUB_IMAGE .
          echo "Pushing Image to Docker Hub"
          docker push $DOCKERHUB_IMAGE
